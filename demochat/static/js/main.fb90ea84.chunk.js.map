{"version":3,"sources":["components/Chat/index.tsx","components/Auth/index.tsx","components/Header/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Chat","props","refInput","useRef","user","localStorage","getItem","useState","messages","setMessages","textInput","setTextInput","localContainerName","chatId","handleDoubleClick","e","currentTarget","firstElementChild","nextElementSibling","innerHTML","map","m","id","toString","dataset","editMode","handleMessageChange","text","value","messageSubmit","setItem","JSON","stringify","handleMessageKeyDown","key","handleAtClick","current","focus","handleDelete","a","filter","time","useEffect","parse","className","i","data-id","type","autoFocus","onBlur","onKeyDown","onChange","onDoubleClick","onClick","moment","calendar","onSubmit","preventDefault","Date","now","length","ref","placeholder","target","Auth","inputValue","setInputValue","registerHandler","updateAuth","name","htmlFor","Header","floodBtn","chatBtn","btnClasses","setBtnClasses","isAuth","updateChatId","removeItem","App","setIsAuth","setChatId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb90ea84.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport moment from 'moment'\n\ninterface Message {\n    user: string,\n    text: string,\n    time: number,\n    editMode: boolean,\n    id: number\n}\n\n\nconst Chat = (props: {chatId: number}) => {\n    const refInput = useRef<HTMLInputElement>(null)\n    const user: string = localStorage.getItem('login') || '' \n    const [messages, setMessages] = useState<Message[]>([])\n    const [textInput, setTextInput] = useState('')\n    const localContainerName = props.chatId ? 'chatMessages' : 'floodMessages'\n\n    const handleDoubleClick = (e: React.MouseEvent<HTMLLIElement>) => {\n        if (e.currentTarget.firstElementChild?.nextElementSibling?.innerHTML === localStorage.getItem('login')) {\n            setMessages(messages.map((m) => {\n                if (m.id.toString() === e.currentTarget.dataset.id) {\n                    return {\n                        ...m,\n                        editMode: true\n                    }\n                } else return m\n            }))\n        }\n    }\n\n    const handleMessageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMessages(messages.map((m) => {\n            if (m.id.toString() === e.currentTarget.dataset.id) {\n                return {\n                    ...m,\n                    text: e.currentTarget.value\n                }\n            } else return m\n        }))\n    }\n\n    const messageSubmit = (e: React.SyntheticEvent<HTMLInputElement>) => {\n        setMessages(messages.map((m) => {\n            if (m.id.toString() === e.currentTarget.dataset.id) {\n                return {\n                    ...m,\n                    editMode: false\n                }\n            } else return m\n        }))\n        localStorage.setItem(localContainerName, JSON.stringify((\n            messages.map((m) => {\n            if (m.id.toString() === e.currentTarget.dataset.id) {\n                return {\n                    ...m,\n                    editMode: false\n                }\n            } else return m\n        }))))\n    }\n\n    \n    const handleMessageKeyDown = (e:React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\" || e.key === \"Escape\") {\n            setMessages(messages.map((m) => {\n                if (m.id.toString() === e.currentTarget.dataset.id) {\n                    return {\n                        ...m,\n                        editMode: false\n                    }\n                } else return m\n            }))\n            localStorage.setItem(localContainerName, JSON.stringify((\n                messages.map((m) => {\n                    if (m.id.toString() === e.currentTarget.dataset.id) {\n                        return {\n                            ...m,\n                            editMode: false\n                        }\n                    } else return m\n                }))))   \n            }\n        }\n        \n    const handleAtClick = (e:React.SyntheticEvent<HTMLSpanElement>) => {\n        setTextInput(`@${e.currentTarget.dataset.id} ${textInput}` || textInput)\n        refInput.current?.focus()\n    }\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTextInput(e.target.value)\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n            setMessages([...messages, {user: user, text: textInput, time: Date.now(), editMode: false, id: messages.length}])\n            setTextInput('')\n            localStorage.setItem(localContainerName, JSON.stringify([...messages, {user, text: textInput, time: Date.now(), editMode: false, id: messages.length}]))   \n    }\n    const handleDelete = async (e: React.MouseEvent<HTMLSpanElement>) => {\n        let id = e.currentTarget.dataset.id\n            await setMessages(messages.filter((m) => m.time.toString() !== id))\n            localStorage.setItem(localContainerName, JSON.stringify(messages.filter((m) => m.time.toString() !== id)))  \n    }\n\n    useEffect(() => {\n            setMessages(JSON.parse(localStorage.getItem(localContainerName) + '') \n            ? JSON.parse(localStorage.getItem(localContainerName) + '') \n            : [])\n            refInput.current?.focus()\n    }, [localContainerName])\n    \n    return (\n        <div className={'container'}>\n            {props.chatId === 0 && (<h1>Flood</h1>)}\n            {props.chatId === 1 && (<h1>Chat</h1>)}\n            <div className=\"row msg-container\">\n                <ul className=\"collection\">\n                    <li className=\"collection-item\"><strong><span>@</span>Developer</strong>: Для редактирования сообщения кликните на него 2 раза.<span></span></li>\n                    {\n                    messages.map((m, i) => {\n                        if (!m.editMode) {\n                            return (\n                            <li \n                            data-id={m.id}\n                            onDoubleClick={handleDoubleClick}\n                            className=\"collection-item\" \n                            key={i}>    \n                                <span className=\"at\" onClick={handleAtClick} data-id={m.user}>@</span><strong className=\"blue-text darken-3\">{m.user}</strong>: <span>{m.text}</span><span className=\"right\">{moment(m.time).calendar()}</span> {\n                                    m.user === localStorage.getItem('login') && (\n                                        <span data-id={m.time} onClick={handleDelete} className=' delete hoverable right'>delete</span>\n                                    )\n                                }\n                            </li>\n                            )\n                        } else {\n                            return (\n                                    <input data-id={m.id} type=\"text\" value={m.text} autoFocus={true} onBlur={messageSubmit} onKeyDown={handleMessageKeyDown} onChange={handleMessageChange} />\n                            )\n                        }\n                    })\n                    }\n                </ul>\n            </div>\n            <form className=\"bot\" onSubmit={handleSubmit}>\n                <input ref={refInput} type=\"text\" placeholder={'Your message'} value={textInput} onChange={handleChange}/>\n            </form>\n        </div>\n    );\n  }\n  \n  export default Chat;","import React, { useState } from 'react'\n\ninterface propsState {\n    updateAuth: (value: boolean) => void\n}\n\nconst Auth = (props: propsState) => {    \n    const [inputValue, setInputValue] = useState('')\n\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setInputValue(e.target.value)\n    }\n    const registerHandler = () => {\n        props.updateAuth(true)\n        localStorage.setItem('login', inputValue)\n        setInputValue('')\n    }\n\n    return (\n\n        <div className=\"row\">\n            <div className=\"col s4 offset-s4\">\n                <div className=\"card blue darken-1\">\n                            <div className=\"card-content white-text\">\n                                <span className=\"card-title\">Авторизация</span>\n                                <form onSubmit={registerHandler}>\n                                    <div>\n                                    \n                                        <div className=\"input-field\">\n                                            <input \n                                            autoFocus={true}\n                                            onChange={changeHandler}\n                                            value={inputValue}\n                                            id=\"userName\" \n                                            type=\"text\"\n                                            name=\"name\"\n                                            className=\"white-text\"\n                                            />\n                                            <label htmlFor=\"first_name\">Your login</label>\n                                        </div>\n\n                                    </div>\n                                </form>\n                            </div>\n                            <div className=\"card-action\">\n                                <button className=\"btn yellow darken-4\" onClick={registerHandler}>Войти</button>\n                            </div>\n                        </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Auth","import React, { useState } from 'react';\n\ninterface PropsState {\n    updateChatId: (value: number) => void\n    updateAuth: (value: boolean) => void\n    isAuth: boolean\n}\n\nconst Header = (props: PropsState) => {\n\n    let [btnClasses, setBtnClasses] = useState({floodBtn: 'btn disabled', chatBtn: 'btn'})\n\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        props.updateChatId(0)\n        setBtnClasses({chatBtn: 'btn', floodBtn: 'btn disabled'})\n    }\n\n    const handleClick1 = () => {\n        props.updateChatId(1)\n        setBtnClasses({floodBtn: 'btn', chatBtn: 'btn disabled'})\n\n    }\n\n    const handleLogOut = () => {\n        localStorage.removeItem('login')\n        props.updateAuth(false)\n    }\n\n    return (\n        \n      <header className={'header'}>\n        <nav>\n            <div className=\"nav-wrapper row valign-wrapper blue darken-1\">\n                <span className=\"col offset-s1 s1 brand-logo\">Logo</span>\n\n                {\n                    props.isAuth && (\n                        <ul id=\"nav-mobile\" className=\"col offset-s5 s2 hide-on-med-and-down chats\">\n                            <li><button onClick={handleClick} className={btnClasses.floodBtn}>flood</button></li>\n                            <li><button onClick={handleClick1} className={btnClasses.chatBtn}>chat</button></li>\n                        </ul>\n                    )\n                }\n                { \n                    props.isAuth && (\n                        <button onClick={handleLogOut} className=\"btn col offset-s3 red darken-1\">Выйти</button>\n                    )\n                }\n\n            </div>\n        </nav>\n      </header>\n    );\n  }\n  \n  export default Header;","import React, { useState } from 'react';\nimport './App.css';\nimport Chat from './components/Chat';\nimport Auth from './components/Auth';\nimport Header from './components/Header';\n\nfunction App() {\n  const [isAuth, setIsAuth] = useState(!!localStorage.getItem('login'))\n  const [chatId, setChatId] = useState(0)\n  const updateAuth = (value: boolean) => {\n    setIsAuth(value)\n  }\n  const updateChatId = (value: number) => {\n    setChatId(value)\n  }\n\n  return (\n    <div className=\"App\">\n      <Header updateAuth={updateAuth} updateChatId={updateChatId} isAuth={isAuth}/>\n        {\n          !isAuth && (<Auth updateAuth={updateAuth}/>)\n        }\n        {\n          isAuth && (<Chat chatId={chatId}/>)\n        }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}